return(temp)
}
func6 = function(x, y){
log(x + y) #we know that log() does not work for negative values
temp = as.numeric(x) + as.numeric(y)
return(temp)
}
#throws an error and we do not complete the function
func6("3", 2)
#fix by using try()
func7 = function(x, y){
try(log(x + y)) #we know that log() does not work for negative values
temp = as.numeric(x) + as.numeric(y)
return(temp)
}
func7("3", 2)
##Trying the tryCatch() function
show_condition = function(code){
tryCatch(code,
error = function(x){
y <= x
})
}
show_condition(stop("!"))
?tryCatch
##Trying the tryCatch() function
show_condition = function(code){
tryCatch(code,
error = function(x){
y = x
})
}
show_condition(stop("!"))
##Trying the tryCatch() function
show_condition <- function(code) {
tryCatch(code,
error = function(x) "myError",
warning = function(x) "myWarning",
message = function(x) "myMessage"
)
}
show_condition(stop("!"))
iris
rowslicer = function(firstRow, lastRow){
return(iris[firstRow:lastRow,])
}
rowslicer = function(firstRow, lastRow){
return(iris[firstRow:lastRow, ])
}
rowslicer(1,3)
rowslicer(firstRow = 1, lastRow = 3)
rowslicer(lastRow = 3, firstRow = 1)
rowslicer(3, 1)
3:1
(1:3):5
1:5
# gonna give a warning
# but funcitons like
rowslicer(1:5)
# gonna give a warning
# but funcitons like
rowslicer(1,5)
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
for(i in length(firstRow_vec)){
iris[firstRow_vec[i]:lastRow_vec[i], ]
}
}
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
for(i in length(firstRow_vec)){
iris[firstRow_vec[i]:lastRow_vec[i], ]
}
}
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
for(i in length(firstRow_vec)){
iris[firstRow_vec[i]:lastRow_vec[i], ]
}
}
rowslicer_vectorized(firstRow_vec = c(1, 10), lastRow_vec = c(3, 13))
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
for(i in length(firstRow_vec)){
print(iris[firstRow_vec[i]:lastRow_vec[i], ])
}
}
rowslicer_vectorized(firstRow_vec = c(1, 10), lastRow_vec = c(3, 13))
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
l = list()
for(i in length(firstRow_vec)){
l[[i]] = iris[firstRow_vec[i]:lastRow_vec[i], ]
}
return(l)
}
rowslicer_vectorized(firstRow_vec = c(1, 10), lastRow_vec = c(3, 13))
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
l = list()
for(i in 1:length(firstRow_vec)){
l[[i]] = iris[firstRow_vec[i]:lastRow_vec[i], ]
}
return(l)
}
rowslicer_vectorized(firstRow_vec = c(1, 10), lastRow_vec = c(3, 13))
rowslicer = function(firstRow, lastRow){
return(iris[firstRow:lastRow, ])
}
rowslicer = function(firstRow, lastRow){
return(iris[firstRow:lastRow, ])
}
library(codetools)
findGlobals(rowslicer)
x=11
rowslicer = function(firstRow, lastRow){
x
return(iris[firstRow:lastRow, ])
}
findGlobals(rowslicer) #what do I need to run,
#take df as an arg
rowslicerdf = function(myDataFrame, firstRow, lastRow){
return(myDataFame[firstRow:lastRow, ])
}
#take df as an arg
rowslicerdf = function(myDataFrame, firstRow, lastRow){
return(myDataFrame[firstRow:lastRow, ])
}
data()
rowslicerdf(myDataFrame = ChickWeight, firstRow = 1, lastRow = 5)
function.5 = function(a = ls()){
z = 10
a
}
ls()
function.5()
function.5 = function(a = ls()){
force(a)
z = 10
a
}
function.5()
x = 1:5
mean(x)
x = c(1, 4, NA, 7, 10)
mean(x)
mean(x, na.rm = TRUE)
rowslicer_vectorized = function(firstRow_vec, lastRow_vec){
l = list()
for(i in length(firstRow_vec)){
l[[i]] = iris[firstRow_vec[i]:lastRow_vec[i], ]
}
return(l)
}
rowslicer_vectorized(firstRow_vec = c(1, 10), lastRow_vec = c(3, 13))
take_avg = function(x){
(x[1]+x[2]+x[3])/3
}
take_avg(x = 1:3)
take_avg(x = 1:2)
take_avg("asdjhasjdha")
take_avg("asdjhasjdha")
##De-bugging
#first note that we cannot add a character to a numeric
"Mystring" + 99
func1 = function(arg_1) func2(arg_1)
func2 = function(arg_2) func3(arg_2)
func3 = function(arg_3) func4(arg_3)
func4 = function(arg_4) "Mystring" + arg_4
func1(99) #in essence will pass 99 through 4 functions and
func5 = function(x, y){
try(log(x + y)) #we know that log() does not work for negative values
temp = x + y
return(temp)
}
func5 = function(x, y){
try(log(x + y)) #we know that log() does not work for negative values
temp = x + y
return(temp)
}
func(5, 10)
func5(5, 10)
func5(-3, -2)
g = function(x){
try(temp = log(x)) #we know that log() does not work for negative values
return(temp)
}
xvec = c(1, 2, 3, NA, 3, 2, 1)
g = function(x){
temp = NA
try(temp = log(x)) #we know that log() does not work for negative values
return(temp)
}
xvec = c(1, 2, 3, NA, 3, 2, 1)
for(i in 1:length(xvec)){
print(g(xvec[i]))
}
g = function(x){
temp = NA
temp = try(log(x)) #we know that log() does not work for negative values
return(temp)
}
xvec = c(1, 2, 3, NA, 3, 2, 1)
for(i in 1:length(xvec)){
print(g(xvec[i]))
}
xvec = c(1, 2, 3, NA, 3, 2, 1, -20, 50, sqrt(12), -4)
for(i in 1:length(xvec)){
print(g(xvec[i]))
}
##Trying the tryCatch() function
show_condition <- function(code) {
tryCatch(code,
error = function(x) "myError",
warning = function(x) "myWarning",
message = function(x) "myMessage"
)
}
show_condition(stop("!"))
string_match = function(string1, string2){
#Input: string1 and string2 are vectors of strings of the same length
#Output: same.string - vector containing all strings where string1 and string2 match
#check that both vectors are character types
if(is.character(string1) == FALSE | is.character(string2) == FALSE){
stop("string1 and string2 must both be character vectors!")
}
#check that both vectors are the same length
if(length(string1) != length(string2)){
stop("string1 and string2 must be of the same length!")
}
logical_same = string1 == string2
same_string = string1[logical.same]
return(same_string)
}
string_1 = c("I", "like", "cats")
string_2 = c("I", "like", "birds")
string_same = string.match(string_1, string_2)
string_same = string_match(string_1, string_2)
string_match = function(string1, string2){
#Input: string1 and string2 are vectors of strings of the same length
#Output: same.string - vector containing all strings where string1 and string2 match
#check that both vectors are character types
if(is.character(string1) == FALSE | is.character(string2) == FALSE){
stop("string1 and string2 must both be character vectors!")
}
#check that both vectors are the same length
if(length(string1) != length(string2)){
stop("string1 and string2 must be of the same length!")
}
logical_same = string1 == string2
same_string = string1[logical.same]
return(same_string)
}
string_1 = c("I", "like", "cats")
string_2 = c("I", "like", "birds")
string_same = string_match(string_1, string_2)
string_match = function(string1, string2){
#Input: string1 and string2 are vectors of strings of the same length
#Output: same.string - vector containing all strings where string1 and string2 match
#check that both vectors are character types
if(is.character(string1) == FALSE | is.character(string2) == FALSE){
stop("string1 and string2 must both be character vectors!")
}
#check that both vectors are the same length
if(length(string1) != length(string2)){
stop("string1 and string2 must be of the same length!")
}
logical_same = string1 == string2
same_string = string1[logical_same]
return(same_string)
}
string_1 = c("I", "like", "cats")
string_2 = c("I", "like", "birds")
string_same = string_match(string_1, string_2)
string_same
string_3 = c("I", "like", "cats", "!!!!!!")
string_4 = c("I", "like", "birds")
string_same = string_match(string_3, string_4)
string_match = function(string1, string2){
#Input: string1 and string2 are vectors of strings of the same length
#Output: same.string - vector containing all strings where string1 and string2 match
#check that both vectors are character types
if(is.character(string1) == FALSE | is.character(string2) == FALSE){
stop("string1 and string2 must both be character vectors!")
}
#check that both vectors are the same length
if(length(string1) != length(string2)){
warning("string1 and string2 must be of the same length!")
}
logical_same = string1 == string2
same_string = string1[logical_same]
return(same_string)
}
string_3 = c("I", "like", "cats", "!!!!!!")
string_4 = c("I", "like", "birds")
string_same = string_match(string_3, string_4)
string_same
lev.DF = which(all.values[,"cook.d"] > 4/(n-p))
new.state = data.frame(pop = state.x77[,1], income = state.x77[,2], ill = state.x77[,3], life.exp =  state.x77[,4], murder = state.x77[,5], hs.grad = state.x77[,6], frost.days = state.x77[,7], land.area = state.x77[,8])
summary(new.state)
names(new.state) = c("X1","X2","X3","Y","X4","X5","X6","X7" )
full.model = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7,data = new.state)
library(leaps)
all.models = regsubsets(Y ~ ., data = new.state, nbest=1, nvmax=7)
summary_stuff = summary(all.models)
names_of_data = c("Y",colnames(summary_stuff$which)[-1])
n = nrow(new.state) #Will have to change the name
K = nrow(summary_stuff$which)
nicer = lapply(1:K,function(i){
model = paste(names_of_data[summary_stuff$which[i,]],collapse = ",")
p = sum(summary_stuff$which[i,])
BIC = summary_stuff$bic[i]
AIC = summary_stuff$bic[i] - (log(n)* p) + 2*p
CP = summary_stuff$cp[i]
results = data.frame(model,p,CP,AIC, BIC)
return(results)
})
nicer = Reduce(rbind,nicer)
nicer
full.model = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7, data = new.state)
empty.model = lm(Y ~ 1, data = new.state)
n = nrow(new.state)
library(MASS)
forward.model.AIC = stepAIC(empty.model, scope = list(lower = empty.model, upper= full.model), k = 2,direction = "forward")
forward.model.BIC = stepAIC(empty.model,  scope = list(lower = empty.model, upper= full.model), k = log(n),direction = "forward")
forward.model.AIC = stepAIC(empty.model, scope = list(lower = empty.model, upper= full.model), k = 2,direction = "forward",trace = FALSE)
forward.model.BIC = stepAIC(empty.model,  scope = list(lower = empty.model, upper= full.model), k = log(n),trace=FALSE,direction = "forward")
forward.model.AIC$coefficients
backward.model.AIC = stepAIC(full.model, scope = list(lower = empty.model, upper= full.model), k = 2,direction = "backward",trace = FALSE)
backward.model.BIC = stepAIC(full.model,  scope = list(lower = empty.model, upper= full.model), k = log(n),trace=FALSE,direction = "backward")
FB.model.AIC = stepAIC(empty.model, scope = list(lower = empty.model, upper= full.model), k = 2,direction = "both",trace = FALSE)
FB.model.BIC = stepAIC(empty.model,  scope = list(lower = empty.model, upper= full.model), k = log(n),trace=FALSE,direction = "both")
BF.model.AIC = stepAIC(full.model, scope = list(lower = empty.model, upper= full.model), k = 2,direction = "both",trace = FALSE)
BF.model.BIC = stepAIC(full.model,  scope = list(lower = empty.model, upper= full.model), k = log(n),trace=FALSE,direction = "both")
forward.model.AIC$coefficients
backward.model.AIC$coefficients
FB.model.AIC$coefficients
BF.model.AIC$coefficients
forward.model.BIC$coefficients
backward.model.BIC$coefficients
FB.model.BIC$coefficients
BF.model.BIC$coefficients
best.model = lm(Y~X1+X4+X5+X6, data = new.state)
ei.s = best.model$residuals/sqrt(sum(best.model$residuals^2)/(nrow(new.state) - length(best.model$coefficients)))
ri = rstandard(best.model)
ti = rstudent(best.model)
alpha = 0.1 ; n = nrow(new.state); p = length(best.model$coefficients)
cutoff = qt(1-alpha/(2), n - p )
cutoff.deleted = qt(1-alpha/(2), n -p -1 )
outliers = which(abs(ti) > cutoff.deleted)
new.state[outliers,]
all.values = influence.measures(best.model)$infmat
head(all.values)
#colnames(all.values)
lev.hat = which(all.values[,"hat"] > 2*p/n)
new.state[lev.hat,]
lev.DF = which(all.values[,"dffit"] >1)
new.state[lev.DF,]
lev.DF = which(all.values[,"cook.d"] > 4/(n-p))
new.state[lev.DF,]
lev.DF = which(all.values[,"dffit"] > 2*sqrt((p+1)/(n-p-1)))
new.state[lev.DF,]
lev.hat = which(all.values[,"hat"] > 3*p/n)
new.state[lev.hat,]
lev.hat = which(all.values[,"hat"] > 2*p/n)
new.state[lev.hat,]
# uncorrelated predictor variables
X1 = c(4,4,4,4,6,6,6,6)
X2 = c(2,2,3,3,2,2,3,3)
Y = c(42,39,48,51,49,53,61,60)
plot(X1,X2)
cor(X1,X2)
lm(Y~X1+X2)
lm(Y~X1)
lm(Y~X2)
anova(lm(Y~X2+X1))
anova(lm(Y~X1))
anova(lm(Y~X1+X2))
anova(lm(Y~X2))
summary(lm(Y~X1+X2))
summary(lm(Y~X1))
?anova
anova(lm(Y~X1+X2))
anova(lm(Y~X2+X1))
anova(lm(Y~X1+X2))
anova(lm(Y~X2))
summary(lm(Y~X1+X2))
summary(lm(Y~X1))
# perfectly correlated
X1 = c(2,8,6,10)
X2 = c(6,9,8,10)
par(mfrow=c(1,1))
plot(X1,X2)
Y = c(23,83,63,103)
cor(X1,X2)
X = cbind(rep(1,4),X1,X2)
XtX = t(X) %*% X
XtX
solve(XtX)
eigen(XtX)
eigen(XtX)$values
#matrix not invertible! rank deficient (not full rank)
-87 + X1 + 18*X2
-7 + 9*X1 + 2*X2
#Variance Inflation
X1=runif(100, 25, 50)
X2=rnorm(100, 10, 3)
eps=rnorm(100, 0 ,4)
Y=7+3*X1+5*X2+eps
mod1=lm(Y~X1+X2)
summary(mod1)
#create a nearly perfectly collinear variable
X3=2*X1+3*X2+rnorm(100,0,.01)
cor(X1,X3)
cor(X2,X3)
cor(2*X1+3*X2,X3)
mod2=lm(Y~X1+X2+X3)
summary(mod2)
summary(mod1)
summary(mod2)
# uncorrelated predictor variables
X1 = c(4,4,4,4,6,6,6,6)
X2 = c(2,2,3,3,2,2,3,3)
Y = c(42,39,48,51,49,53,61,60)
plot(X1,X2)
Y = c(42,39,48,51,49,53,61,60)
cor(X1,X2)
lm(Y~X1+X2)
lm(Y~X1)
lm(Y~X2)
anova(lm(Y~X2+X1))
anova(lm(Y~X1))
anova(lm(Y~X1+X2))
anova(lm(Y~X2))
summary(lm(Y~X1+X2))
summary(lm(Y~X1))
anova(lm(Y~X1+X2))
# perfectly correlated
X1 = c(2,8,6,10)
X2 = c(6,9,8,10)
cor(X1,X2)
plot(X1,X2)
Y = c(23,83,63,103)
X = cbind(rep(1,4),X1,X2)
X
XtX = t(X) %*% X
XtX
#zero eigen value
eigen(XtX)
#singular matrix!
4.813655e+02
#singular matrix!
solve(XtX)
#matrix not invertible! rank deficient (not full rank)
-87 + X1 + 18*X2
-7 + 9*X1 + 2*X2
#Variance Inflation
X1=runif(100, 25, 50)
X2=rnorm(100, 10, 3)
eps=rnorm(100, 0 ,4)
Y=7+3*X1+5*X2+eps
mod1=lm(Y~X1+X2)
summary(mod1)
cor(X1, X2)
Y=7+3*X1+5*X2+eps
mod1=lm(Y~X1+X2)
summary(mod1)
#create a nearly perfectly collinear variable
X3=2*X1+3*X2+rnorm(100,0,.01)
cor(X1,X3)
cor(X2,X3)
cor(2*X1+3*X2,X3)
mod2=lm(Y~X1+X2+X3)
summary(mod2)
summary(mod1)
summary(mod2)
summary(mod1)
summary(mod2)
summary(mod1)
summary(mod2)
#Variance Inflation
X1=runif(100, 25, 50)
X2=rnorm(100, 10, 3)
eps=rnorm(100, 0 ,4)
cor(X1, X2)
Y=7+3*X1+5*X2+eps
mod1=lm(Y~X1+X2)
summary(mod1)
#create a nearly perfectly collinear variable
X3=2*X1+3*X2+rnorm(100,0,.01)
cor(X1,X3)
cor(X2,X3)
cor(2*X1+3*X2,X3)
mod2=lm(Y~X1+X2+X3)
summary(mod2)
summary(mod1)
summary(mod2)
vif_model = lm(X3 ~ X1 + X2)
summary(vif_model)
sum = summary(vif_model)
r2j = sum$r.squared
vif_j = 1/(1-r2j)
vif_j
(vif_j>10)
summary(mod1)
summary(mod2)
summary(mod1)
89.858^2 / 0.06063^2
vif_j
vif1_model = lm(X1 ~ X2 + X3)
sum = summary(vif1_model)
#2 Calc R2 for this model (Model j)
r21 = sum$r.squared
vif_1 = 1/(1-r21)
#3. Check vs. cutoff (4 or 10)
(vif_1>10)
vif_1
89.858^2 / 0.06063^2
