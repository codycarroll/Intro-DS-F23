summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig_summary
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point()
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point()
relig_summary
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age, label = relig)) +
geom_point() +
geom_text()
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age, label = relig)) +
geom_point() +
geom_text(hjust = 0.1)
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age, label = relig)) +
geom_point() +
geom_text(hjust = 0.2)
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age, label = relig)) +
geom_point() +
geom_text(hjust = 0.5)
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age, label = relig)) +
geom_point() +
geom_text(hjust = 0)
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
#plot with factors not ordered
library(ggrepel)
ggplot(relig_summary, aes(x = tvhours, y = age)) +
geom_point() +
geom_label_repel(mapping = aes(label = relig))
ggplot(gss_cat, aes(x = tvhours, y = age)) +
geom_point()
#plot with factors not ordered
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
#plot with re-ordered factors in religion
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point()
#plot with re-ordered factors in religion
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation")
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, -tvhours))) +
geom_point() +
ylab("Religious Affiliation")
?fct_reorder
#example with partyid
count(dataset, partyid)
dataset
#re-label these party ids to be a little more clear
mutate1 = mutate(dataset, partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat"
))
count(mutate1, partyid)
#collapsing a lot of levels to be more simple label names
#here, we collapse multiple levels into the levels "other",
#"rep", "ind", and "dem"
newpartyid = fct_collapse(dataset$partyid,
other = c("No answer",
"Don't know",
"Other party"),
rep = c("Strong republican",
"Not str republican"),
ind = c("Ind,near rep",
"Independent",
"Ind,near dem"),
dem = c("Not str democrat",
"Strong democrat"))
newpartyid
dataset$party_summary = newpartyid
dataset
View(dataset)
colnames(dataset)
drop_idx = (colnames(dataset) == "partyid")
drop_idx
dataset[,-drop_idx]
View(dataset[,-drop_idx])
View(dataset[,!drop_idx])
?subset
dataset[,-c("partyid")]
dataset[,!c("partyid")]
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, -tvhours))) +
geom_point() +
ylab("Religious Affiliation")
ggplot(relig_summary,
aes(x = tvhours,
y = fct_reorder(relig, tvhours))) +
geom_point() +
ylab("Religious Affiliation")
relig_summary
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours))
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
default_relig_summary = relig_summary
reordered_relig_summary = relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours))
levels(default_relig_summary$relig)
levels(reordered_relig_summary$relig)
gss_cat
gss_cat$rincome
rincome_summary <- gss_cat %>%
group_by(rincome) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome_summary
##Income Range ordered by Age
ggplot(rincome_summary,
aes(x = age,
y = fct_reorder(rincome, age))) +
geom_point()
##Income Range ordered by Age
ggplot(rincome_summary,
aes(x = age,
y = fct_reorder(rincome, age))) +
geom_point() +
ylab("Income Range")
mean(
#hw for me: drop columns by name
dataset %>% select(-partyid)
#hw for me: drop columns by name
View(dataset %>% select(-partyid))
View(dataset)
#hw for me: drop columns by name
dataset %>% select(year, marital, age)
!drop_idx
?select
rincome_summary
rincome_summary %>%
mutate(rincome = fct_reorder(rincome, age))
rincome_summary %>%
mutate(rincome = fct_reorder(rincome, age)) %>%
ggplot(aes(age, rincome)) +
geom_point()
mutated_rincome = rincome_summary %>%
mutate(rincome = fct_reorder(rincome, age))
mutated_rincome = rincome_summary %>%
mutate(rincome = fct_reorder(rincome, age))
mutated_rincome %>%
ggplot(aes(age, rincome)) +
geom_point()
levels(rincome_summary$rincome)
rincome_summary %>%
ggplot(aes(age, rincome)) +
geom_point()
?fct_relevel
f <- factor(c("a", "b", "c", "d"), levels = c("b", "c", "d", "a"))
f
fct_relevel(f)
fct_relevel(f, "a")
fct_relevel(f, "b", "a")
rincome_summary %>%
mutate(rincome = fct_relevel(rincome, "Not applicable")) %>%
ggplot(aes(age, rincome)) +
geom_point()
gss_cat
gss_cat %>%
filter(!is.na(age))
gss_cat %>%
filter(!is.na(age)) %>%
count(age, marital)
gss_cat %>%
filter(!is.na(age)) %>%
count(age, marital) %>%
group_by(age)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = n / sum(n))
by_age
View(by_age)
ggplot(by_age,
aes(x = age, y = prop, colour = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age,
aes(x = age, y = prop, colour = marital)) +
geom_line(na.rm = TRUE) +
ggtitle("Marital Status Composition by Age")
?fct_reorder2
ggplot(by_age,
aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital")
ggplot(by_age,
aes(x = age, y = prop, colour = marital)) +
geom_line(na.rm = TRUE) +
ggtitle("Marital Status Composition by Age")
library(readr)
library(ggplot2)
library(magrittr)
#set wd to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
food = read_csv(file = "../Data/Food.csv")
head(food)
install.packages("ggplot2")
library(ggplot2)
#plot a bar chart of pnns_groups_1
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1))
install.packages("ggplot2")
install.packages("ggplot2")
#plot a bar chart of pnns_groups_1
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1))
#text trainwreck on bottom; to rotate xaxis labels use this:
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)
#text trainwreck on bottom; to rotate xaxis labels use this:
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#plot in a new window
dev.new()
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#plot in a new window
dev.new()
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("food type") +
ggtitle("Food Groups")
#------------------------
#Pairwise scatter plots
data = swiss
?swiss
#scatter plot of every variable against one another in a grid
plot(data)
#scatter plot of say the first 3 variables
plot(data[, 1:3])
library(GGally)
ggpairs(data, aes(alpha = 0.4))
##Histograms
dev.new()
gg1 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white")
gg1
gg1
gg1
#same histogram but with more bars (100 of them)
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 100)
gg2
#side-by-side plotting w/ ggarrange
library(ggpubr)
ggarrange(gg1, gg2)
ggplot(food, aes(x = energy_100g)) +
geom_histogram(aes(y = after_stat(density)), color="black", fill="white", bins = 100) +
geom_density(alpha=.2, fill="red")
ggplot(food, aes(x = energy_100g)) +
geom_histogram(aes(y = after_stat(density)),
color="black",
fill="white",
bins = 100) +
geom_density(alpha=.2, fill="red")
#-------------------------------
#box plots
ggplot(food) +
geom_boxplot(aes(x = energy_100g))
#show boxplot of this variable across food groups in
#pnns_groups_1
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1))
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1))+
coord_flip()
#first, read in the diamonds data set
diamonds = read.csv(file = "../Data/diamonds.csv",
header = TRUE)
plot1 = ggplot(diamonds, aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 + geom_point()
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 + geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 + geom_smooth()
plot3
# to do this, we need to re-order our specifications.
plot1b = ggplot(diamonds, aes(x = carat, y = price))
plot2b = plot1b + geom_smooth() #line first
plot3b = plot2b + geom_point(aes(colour = color, shape = cut)) #then add colors and shapes
plot3b
#use inherit.aes = FALSE to ignore previously defined aesthetics
plot4 = plot2 + geom_point(aes(shape = cut)) +
geom_smooth(inherit.aes = FALSE, aes(x = carat, y = price))
plot4
#you can also store geometric objects and apply them to any plot! (super useful!!)
bestfitline = geom_smooth(method = "lm", se = TRUE,
colour = alpha("steelblue", 0.5), linewidth = 2)
plot4 + bestfitline
plot4 + bestfitline
#set wd to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
food = read_csv(file = "../Data/Food.csv")
library(readr)
library(ggplot2)
library(magrittr)
#set wd to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
food = read_csv(file = "../Data/Food.csv")
head(food)
View(food)
#plot a bar chart of pnns_groups_1
ggplot(food) +
geom_bar(aes(x = pnns_groups_1))
#plot a bar chart of pnns_groups_1
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1))
#text trainwreck on bottom; to rotate xaxis labels use this:
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dev.new()
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("food type") +
ggtitle("Food Groups")
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("food type") +
ggtitle("Food Groups")
#------------------------
#Pairwise scatter plots
data = swiss
?swiss
#scatter plot of every variable against one another in a grid
plot(data)
library(GGally)
ggpairs(data, aes(alpha = 0.4))
ggplot(food, aes(x = energy_100g))
gg1 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white")
gg1
dev.new()
gg1
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 100)
gg2
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 10)
gg2
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 100) +
geom_density(color = "red")
gg2
#same histogram but with more bars (100 of them)
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 100) +
geom_density(aes(x = energy_100g), color = "red")
gg2
?geom_histogram
#same histogram but with more bars (100 of them)
gg2 = ggplot(food, aes(x = energy_100g, after_stat(density))) +
geom_histogram(color="black", fill="white", bins = 100) +
gg2
gg2 = ggplot(food, aes(x = energy_100g, y = after_stat(density))) +
geom_histogram(color="black", fill="white", bins = 100) +
gg2
ggplot(food, aes(x = energy_100g)) +
geom_histogram(aes(y = after_stat(density)),
color="black",
fill="white",
bins = 100) +
geom_density(alpha=.2, fill="red")
#same histogram but with more bars (100 of them)
gg2 = ggplot(food, aes(x = energy_100g,)) +
geom_histogram(color="black", fill="white", bins = 100) +
gg2
#-------------------------------
#box plots
ggplot(food) +
geom_boxplot(aes(x = energy_100g))
#show boxplot of this variable across food groups in
#pnns_groups_1
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1))
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1)) +
coord_flip()
plot1 = ggplot(diamonds,
aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 +
geom_point()
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 +
geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 +
geom_smooth()
plot3
plot1 = ggplot(diamonds,
aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 +
geom_point(aes(alpha = 0.5))
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 +
geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 +
geom_smooth()
plot3
plot1 = ggplot(diamonds,
aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 +
geom_point(aes(alpha = 0.25))
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 +
geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 +
geom_smooth()
plot3
# to do this, we need to re-order our specifications.
plot1b = ggplot(diamonds,
aes(x = carat, y = price))
plot2b = plot1b +
geom_smooth() #line first
plot3b = plot2b +
geom_point(aes(colour = color,
shape = cut)) #then add colors and shapes
plot3b
plot1 = ggplot(diamonds,
aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 +
geom_point(aes(alpha = 0.25))
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 +
geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 +
geom_smooth()
plot3
# to do this, we need to re-order our specifications.
plot1b = ggplot(diamonds,
aes(x = carat, y = price))
plot2b = plot1b +
geom_smooth() #line first
plot2b
plot3
avg_smoothed_curve = geom_smooth(data = diamongs, aes(x = carat, y = price))
avg_smoothed_curve = geom_smooth(data = diamongs, aes(x = carat, y = price))
avg_smoothed_curve = geom_smooth(data = diamonds, aes(x = carat, y = price))
plot3 +
avg_smoothed_curve
`plot(dataset)`
plot(cats)
library(MASS) # This loads the package where the dataset is
head(cats) #The first 6 rows
names(cats) #The names of the columns
library(ggplot2)
simple.model = lm(Bwt ~ Hwt, data = cats)
plot(cats)
library(MASS) # This loads the package where the dataset is
head(cats) #The first 6 rows
names(cats) #The names of the columns)
library(ggplot2)
simple.model = lm(Bwt ~ Hwt, data = cats)
head(cats)
?cats
ggplot(data = cats, aes(x = Bwt, y = Hwt)) +
geom_point()
ggpairs(cats, aes(alpha = 0.4))
