eplot_circ = ggplot(ebird_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
scale_x_continuous(breaks=seq(0,3*pi/2, pi/2)) +
coord_polar(theta = "x", start = 3*pi/2, direction = 1) +
ggtitle("eBird")+
theme(legend.position = "none")
eplot_circ
inat_df_list_smooth = lapply(X = inat_df_list, FUN = smooth_fourier_k, k=8)
inat_long_smooth = bind_rows(inat_df_list_smooth)
iplot = ggplot(inat_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
ggtitle("iNaturalist")+
theme(legend.position = "none")
iplot
iplot_circ = ggplot(inat_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
scale_x_continuous(breaks=seq(0,3*pi/2, pi/2)) +
coord_polar(theta = "x", start = 3*pi/2, direction = 1) +
ggtitle("iNaturalist")+
theme(legend.position = "none")
iplot_circ
eplot_circ
iplot_circ
demo
eplot
iplot
eplot_circ
iplot_circ
###visual inspection
demo = ebird_df_list[[1]]
test = demo %>% smooth_fourier_k(k = 8)
test
ggplot(test) +
geom_point(aes(x = angle, y = OBSERVATION.COUNT)) +
geom_line(aes(x = angle, y = smooth_count))
ggplot(test) +
geom_line(aes(x = angle, y = dens))
eplot
ggplot(test) +
geom_point(aes(x = angle, y = OBSERVATION.COUNT)) +
geom_line(aes(x = angle, y = smooth_count))
ggplot(test) +
geom_line(aes(x = angle, y = dens))
#birds circular fourier basis
rm(list = ls())
library(fdapace)
library(tidyverse)
library(plyr)
library(pracma)
library(tidyr)
library(kdensity)
library(circular)
library(fda)
library(ggradar)
inat <- read.csv("~/Desktop/repos/explorations_func_data/notebooks/iNat_bird_counts_weekly.csv")
ebird <- read.csv("~/Desktop/repos/explorations_func_data/notebooks/ebird_data_135_weekly_nn.csv")
#subset ebird data
ebird = ebird[,-(5:6)]
head(ebird)
#split df by avibaseid, save into a list of dfs
ebird_df_list = dlply(.data = ebird,
.variables = 'AVIBASEID',
.fun = function(x){return(x)})
#reshape iNat data
head(inat)
colnames(inat) = c("X","AVIBASEID", 1:52)
inat_long = inat %>% pivot_longer(cols = as.character(1:52),
names_to="WEEK",
values_to="OBSERVATION.COUNT")
inat_long$WEEK = as.numeric(inat_long$WEEK)
for(i in 1:length(ebird_df_list)){
print(c(i,sum(ebird_df_list[[i]]$OBSERVATION.COUNT), ebird_df_list[[i]]$AVIBASEID[1]))
}
out = c("0B1B2EB6","115F04DD","56036504")
`%notin%` = Negate(`%in%`)
ebird_132 = ebird %>% filter(AVIBASEID %notin% out)
inat_132 = inat_long %>% filter(AVIBASEID %notin% out)
#split df by avibaseid, save into a list of dfs
ebird_df_list = dlply(.data = ebird_132,
.variables = 'AVIBASEID',
.fun = function(x){return(x)})
inat_df_list = dlply(.data = inat_132,
.variables = 'AVIBASEID',
.fun = function(x){return(x)})
#make every dataset have weeks 1-52 & return angle for circular plot
std_wks = function(df){
temp_id = df$AVIBASEID[1]
blank_weeks = data.frame(AVIBASEID = temp_id, WEEK = 1:52, OBSERVATION.COUNT = 0)
joined_unsorted = join(df, blank_weeks, by = "WEEK", type = "full")
joined_sorted = arrange(joined_unsorted, WEEK)
joined_sorted$angle = joined_sorted$WEEK*(2*pi/52)
return(joined_sorted)
}
#demo on first bird df
demo = ebird_df_list[[1]]
demo
demo = std_wks(demo)
demo
#apply to all dfs in list
ebird_df_list = dlply(.data = ebird_132,
.variables = 'AVIBASEID',
.fun = std_wks)
inat_df_list = dlply(.data = inat_132,
.variables = 'AVIBASEID',
.fun = std_wks)
smooth_fourier_k = function(df, k){
t = df$angle
y = df$OBSERVATION.COUNT
df$frac_y = df$OBSERVATION.COUNT/sum(df$OBSERVATION.COUNT)
k_basis = create.fourier.basis(rangeval = range(t), nbasis = k)
smooth_y_basis = smooth.basis(argvals = t, y = y, fdParobj = k_basis)$fd
eval_y = eval.fd(t, smooth_y_basis)
eval_y = pmax(eval_y, 0.001) #prevent negatives
df$smooth_count = eval_y
df$dens = eval_y/trapz(t, eval_y)
return(df)
}
###visual inspection
demo = ebird_df_list[[1]]
test = demo %>% smooth_fourier_k(k = 8)
test
ggplot(test) +
geom_point(aes(x = angle, y = OBSERVATION.COUNT)) +
geom_line(aes(x = angle, y = smooth_count))
ggplot(test) +
geom_line(aes(x = angle, y = dens))
ebird_df_list_smooth = lapply(X = ebird_df_list, FUN = smooth_fourier_k, k=8)
ebird_long_smooth = bind_rows(ebird_df_list_smooth)
eplot = ggplot(ebird_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
ggtitle("eBird") +
theme(legend.position = "none")
eplot
eplot_circ = ggplot(ebird_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
scale_x_continuous(breaks=seq(0,3*pi/2, pi/2)) +
coord_polar(theta = "x", start = 3*pi/2, direction = 1) +
ggtitle("eBird")+
theme(legend.position = "none")
eplot_circ
inat_df_list_smooth = lapply(X = inat_df_list, FUN = smooth_fourier_k, k=8)
inat_long_smooth = bind_rows(inat_df_list_smooth)
iplot = ggplot(inat_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
ggtitle("iNaturalist")+
theme(legend.position = "none")
iplot
iplot_circ = ggplot(inat_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
scale_x_continuous(breaks=seq(0,3*pi/2, pi/2)) +
coord_polar(theta = "x", start = 3*pi/2, direction = 1) +
ggtitle("iNaturalist")+
theme(legend.position = "none")
iplot_circ
ggplot(test) +
geom_point(aes(x = angle, y = OBSERVATION.COUNT)) +
geom_line(aes(x = angle, y = smooth_count))
ggplot(test) +
geom_line(aes(x = angle, y = dens))
ebird_df_list_smooth = lapply(X = ebird_df_list, FUN = smooth_fourier_k, k=8)
ebird_long_smooth = bind_rows(ebird_df_list_smooth)
eplot = ggplot(ebird_long_smooth) +
geom_path(aes(angle, dens, group = AVIBASEID, color = AVIBASEID), alpha = 0.25) +
ggtitle("eBird") +
theme(legend.position = "none")
eplot
rotten_tomatoes_movies <- read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
View(rotten_tomatoes_movies)
colnames(rotten_tomatoes_movies)
ratings = rotten_tomatoes_movies[,c(15,18)]
ratings
library(ggplot2)
geom_point(aes(x = audience_rating, y = tomatometer_rating)
library(ggplot2)
ggplot(ratings) +
library(ggplot2)
ggplot(ratings) +
geom_point(aes(x = audience_rating, y = tomatometer_rating))
ratings = rotten_tomatoes_movies[1:150,c(15,18)]
ratings
library(ggplot2)
ggplot(ratings) +
geom_point(aes(x = audience_rating, y = tomatometer_rating))
ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
ratings = rotten_tomatoes_movies[1:100,c(15,18)]
library(ggplot2)
ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
set.seed(123)
sample_index = sample(nrow(ratings), 200)
ratings = rotten_tomatoes_movies[sample_index,c(15,18)]
sample_index = sample(nrow(ratings), 200)
nrow(ratings)
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
sample_index = sample(nrow(rotten_tomatoes_movies), 200)
ratings = rotten_tomatoes_movies[sample_index,c(15,18)]
library(ggplot2)
ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating)) +
ggtitle("Critic Rating vs. Audience Rating")
ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
head(ratings)
save.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/ratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv", header = FALSE)
head(ratings)
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
set.seed(123)
sample_index = sample(nrow(rotten_tomatoes_movies), 200)
ratings = rotten_tomatoes_movies[sample_index,c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
set.seed(1234)
sample_index = sample(nrow(rotten_tomatoes_movies), 200)
ratings = rotten_tomatoes_movies[sample_index,c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
set.seed(1234)
sample_index = sample(nrow(rotten_tomatoes_movies), 150)
ratings = rotten_tomatoes_movies[sample_index,c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
set.seed(12345)
sample_index = sample(nrow(rotten_tomatoes_movies), 150)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
gg1
set.seed(123)
sample_index = sample(nrow(rotten_tomatoes_movies), 150)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
set.seed(123)
sample_index = sample(nrow(rotten_tomatoes_movies), 125)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
set.seed(12)
sample_index = sample(nrow(rotten_tomatoes_movies), 125)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
rotten_tomatoes_movies = read.csv("~/Desktop/repos/math372/data/rotten_tomatoes_movies.csv")
colnames(rotten_tomatoes_movies)
set.seed(12)
sample_index = sample(nrow(rotten_tomatoes_movies), 100)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
set.seed(1)
sample_index = sample(nrow(rotten_tomatoes_movies), 100)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
sample_index = sample(nrow(rotten_tomatoes_movies), 200)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
set.seed(1)
sample_index = sample(nrow(rotten_tomatoes_movies), 200)
ratings = rotten_tomatoes_movies[sample_index, c(2,15,18)]
write.csv(ratings, "~/Desktop/repos/math372/data/movieratings.csv")
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
library(ggplot2)
gg1 = ggplot(ratings) +
geom_point(aes(x = tomatometer_rating, y = audience_rating))
gg1
ggsave(gg1, filename = "~/Desktop/repos/math372/LecNotes/img/ratings.png")
movieratings <- read.csv("~/Desktop/repos/math372/data/movieratings.csv")
View(movieratings)
knitr::opts_chunk$set(echo = TRUE)
ratings = read.csv("~/Desktop/repos/math372/data/movieratings.csv")
head(ratings)
ratings
complete.cases(ratings)
summary(complete_index)
complete_index = complete.cases(ratings)
complete_index
complete_index
summary(complete_index)
#let's stick to just the complete cases
ratings_complete = ratings[complete_index, ]
corr(ratings_complete$tomatometer_rating, ratings_complete$audience_rating)
cor(ratings_complete$tomatometer_rating, ratings_complete$audience_rating)
library(tidyverse)
?geom_smooth
knitr::opts_chunk$set(echo = TRUE)
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
#fit linear model
ratingline=lm(audience_rating~tomatometer_rating, data=ratings_complete)
ratings_complete$residuals <- residuals(ratingline) # add residuals to the data.frame
ggplot(ratings_complete, aes(x = tomatometer_rating, y = audience_rating)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(aes(y = predicted), shape = 1) +
geom_segment(aes(xend = tomatometer_rating, yend = predicted), color = "red")
ratings_complete
#fit linear model
ratingline=lm(audience_rating~tomatometer_rating, data=ratings_complete)
ratings_complete$predicted = predict(ratingline)   # Save the predicted values
ratings_complete
ratings_complete$residuals = residuals(ratingline) # add residuals to the data.frame
ratings_complete
ggplot(ratings_complete, aes(x = tomatometer_rating, y = audience_rating)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(aes(y = predicted), shape = 1) +
geom_segment(aes(xend = tomatometer_rating, yend = predicted), color = "red")
ratingline=lm(audience_rating~tomatometer_rating, data=ratings_complete)
summary(ratingline)
(my_atomic_vector_01 = c(99.1, 98.2, 97.3, 96.4))
my_atomic_vector_01 = c(99.1, 98.2, 97.3, 96.4)
(my_atomic_vector_01 = c(99.1, 98.2, 97.3, 96.4))
# store x as 1 through 10
x  =  1:10
x
# store y as x squared
y  =  x^2
# very simple plot of y against x
plot(y ~ x)
# more sophisticated plot with blue line and points
plot(y ~ x, type = "l", col = "blue", main = "y vs. x")
#check out the arguments
?plot
#what happens when I try to do something weird?
z  =  -3
sqrt(z)
z  =  complex(real = -3)
sqrt(z)
#sneak peek: data.frames
df = data.frame(x, y)
df
#say I wanted to start a "ggplot":
ggplot(df)
#First, let's install the package ggplot2
install.packages("ggplot2")
?ggplot
??ggplot2
install.packages("ggplot2")
#so, I just need to load that package to my current R session
# for this, I can use library() or require()
library(ggplot2)
#don't worry about the syntax of ggplot2 yet (future lesson).
#it's just an example to show you how to download new packages
ggplot(data = df, aes(x = x, y = y)) +
geom_line() +
geom_point() +
ggtitle("y vs. x")
#clear just x
rm(x)
#ls: looks at everything
ls()
#clear everything
rm(list = ls())
#now what will ls() return?
ls()
#clear the console
cat("\014")
x = c(1,2,3)
2 + 3
sqrt(4)
2 + 3
2 + 3
sqrt(4)
2 + 3
sqrt(4)
print("abc")
2 + 3
sqrt(4)
x
?sum
?mean
mean(x)
x = c(1, 2, 3)
x
x = c(1, 2, 4)
x
x = 1:10
x
x[10]
x[11] = 11
x
len(x)
length(x)
x = 1:5
x[11] = 11
x
mean(x)
sum(x)
x = 1:5:2
?seq
x = seq(1, 5, 2)
x
x = 1:10000
x
head(x)
head(x, 10)
head(x, 20)
tail(x)
getwd()
setwd("~/Desktop/repos/Intro-DS-F23/CodeDemos")
ls()
rm(list=ls())
data()
?AirPassengers
AirPassengers
AirPassengers  = 1
AirPassengers
data()
data()
data = CO2
data
data = c(1,2,3)
data
CO2
#First, let's install the package ggplot2
install.packages("ggplot2")
install.packages("ggplot2")
?ggplot
?ggplot
?ggplot2
??ggplot2
library(ggplot2)
?ggplot
#don't worry about the syntax of ggplot2 yet (future lesson).
#it's just an example to show you how to download new packages
ggplot(data = df, aes(x = x, y = y)) +
geom_line() +
geom_point() +
ggtitle("y vs. x")
#clear just x
rm(x)
#ls: looks at everything
ls()
