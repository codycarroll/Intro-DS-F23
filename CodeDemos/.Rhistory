g = 4
n = 10000
#bonferroni crit value:
c_bon = qt(1-alpha/(2*g), df = n-2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
c(bonf = c_bon, wh = c_wh)
?qf
alpha = 0.05
g = 10
n = 30
#bonferroni crit value:
c_bon = qt(1 - alpha/(2*g), df = n - 2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n - 2))
c(bonf = c_bon, wh = c_wh)
# g = 4
# n = 10000
#
# #bonferroni crit value:
# c_bon = qt(1-alpha/(2*g), df = n-2)
#
# #WH crit value:
# c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
#
# c(bonf = c_bon, wh = c_wh)
g = 4
n = 100
#bonferroni crit value:
c_bon = qt(1-alpha/(2*g), df = n-2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
c(bonf = c_bon, wh = c_wh)
g = 4
n = 1000
#bonferroni crit value:
c_bon = qt(1-alpha/(2*g), df = n-2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
c(bonf = c_bon, wh = c_wh)
g = 4
n = 10000
#bonferroni crit value:
c_bon = qt(1-alpha/(2*g), df = n-2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
c(bonf = c_bon, wh = c_wh)
g = 3
n = 100
#bonferroni crit value:
c_bon = qt(1-alpha/(2*g), df = n-2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n-2))
c(bonf = c_bon, wh = c_wh)
alpha = 0.05
g = 10
n = 30
#bonferroni crit value:
c_bon = qt(1 - alpha/(2*g), df = n - 2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n - 2))
c(bonf = c_bon, wh = c_wh)
FWER = 1 - (1 - alpha / g) ^ g
FWER
alpha = 0.05
g = 1
n = 30
#bonferroni crit value:
c_bon = qt(1 - alpha/(2*g), df = n - 2)
#WH crit value:
c_wh = sqrt(2*qf(1 - alpha, 2, n - 2))
c(bonf = c_bon, wh = c_wh)
?arctan
knitr::opts_chunk$set(echo = TRUE)
plot(x, y)
x = seq(0,2*pi, length.out = 100)
2*pi
pi
\pi
x = seq(0,6.28, length.out = 100)
y = atan(x)
plot(x, y)
x = seq(0,6.28, length.out = 100)
y = atan((x-3.14)/2) + 1
plot(x, y)
?sigmoid
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = atan((x-3.14)/2) + 1
plot(x, y)
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = 2*atan((x-3.14)/2) + 1
plot(x, y)
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = 10*atan((x-3.14)/2) + 5
plot(x, y)
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = 5*atan((x-3.14)/2) + 5
plot(x, y)
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = 5*atan((x-3.14)/2) + 5
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_smooth(method = "lm")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x = seq(0,6.28, length.out = 100)
y = 5*atan((x-3.14)/2) + 5
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_smooth(method = "lm")
cor(x, y)^2
x = runif(100, 0, 100)
y = -(x - 50)^2 + rnorm(100, 0, 1)
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_smooth(method = "lm")
cor(x, y)^2
x = seq(0,6.28, length.out = 100)
y = 5*atan((x-3.14)/2) + 5
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_smooth(method = "lm", se = FALSE)
cor(x, y)^2
x = runif(100, 0, 100)
y = -(x - 50)^2 + rnorm(100, 0, 1)
df = data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_smooth(method = "lm", se = FALSE)
cor(x, y)^2
qt(.995, df = n - 2)
b1 = 0.03883
SSE = 45.818
n = 120
SSX = 2370.025
MSE = SSE/(n-2)
seb1 = sqrt(MSE/SSX)
tcrit = qt(.995, df = n - 2)
CI = round(b1 + c(-1,1)*tcrit*seb1, 4)
b1 = 0.03883
SSE = 45.818
n = 120
SSX = 2370.025
MSE = SSE/(n-2)
seb1 = sqrt(MSE/SSX)
tcrit = qt(.995, df = n - 2)
CI = round(b1 + c(-1,1)*tcrit*seb1, 4)
CI
#pval
pf(F_stat, 1, n - 2)
#F =  MSR / MSE
SSR = b1^2 * SSX
MSR = SSR / 1
F_stat = MSR / MSE
#pval
pf(F_stat, 1, n - 2)
weight_full <- read.csv("~/Desktop/STA/STA 108/HW/weight_full.txt", sep="")
View(weight_full)
weight_full <- read.csv("~/Desktop/STA/STA 108/HW/weight_full.txt", sep="")
#if we do it from scratch
y=weight_full$weight
x=weight_full$height
ybar=mean(y)
xbar=mean(x)
n=length(x)
betahat1=sum((x-xbar)*(y-ybar))/sum((x-xbar)^2)
betahat0=ybar-betahat1*xbar
summary(wh)
weight_full <- read.csv("~/Desktop/STA/STA 108/HW/weight_full.txt", sep="")
#if we do it from scratch
y=weight_full$weight
x=weight_full$height
ybar=mean(y)
xbar=mean(x)
n=length(x)
betahat1=sum((x-xbar)*(y-ybar))/sum((x-xbar)^2)
betahat0=ybar-betahat1*xbar
yhat=function(x){
betahat0+betahat1*x
}
sigmahat2=sum((y-yhat(x))^2)/(n-2)
#CI
seyhat=function(xh){
sqrt(sigmahat2*(1/n + (xh-xbar)^2/sum((x-xbar)^2)))
}
yhat(x=175)+c(-1,1)*qt(.975,df=n-2)*seyhat(xh=175)
#from scratch
senewyhat=function(xh){
sqrt(sigmahat2*(1+1/n + (xh-xbar)^2/sum((x-xbar)^2)))
}
yhat(x=175)+c(-1,1)*qt(.975,df=n-2)*senewyhat(xh=175)
#PI
yhat(x=174)+c(-1,1)*qt(1-alpha/2,df=n-2)*senewyhat(xh=174)
g = 3
alpha=.05/g
#PI
yhat(x=174)+c(-1,1)*qt(1-alpha/2,df=n-2)*senewyhat(xh=174)
yhat(x=175)+c(-1,1)*qt(1-alpha/2,df=n-2)*senewyhat(xh=175)
yhat(x=179)+c(-1,1)*qt(1-alpha/2,df=n-2)*senewyhat(xh=179)
W = sqrt(2 * qf(.95, 2, n - 2))
W
W = sqrt(2 * qf(.95, 2, n - 2))
yhat(x=174)+c(-1,1)*W*seyhat(xh=174)
yhat(x=175)+c(-1,1)*W*seyhat(xh=175)
yhat(x=179)+c(-1,1)*W*seyhat(xh=179)
xlevels = c(170,172,174,175,179,182,183,186)
g = 8
alpha = 0.05/g
for(i in 1:length(xlevels)){
yhat(x=xlevels[i])+c(-1,1)*qt(1-alpha/2,df=n-2)*seyhat(xh=xlevels[i])
}
xlevels = c(170,172,174,175,179,182,183,186)
g = 8
alpha = 0.05/g
bonfmat = matrix(0, nrow = 8, ncol = 2)
for(i in 1:length(xlevels)){
CI[i,] = yhat(x=xlevels[i])+c(-1,1)*qt(1-alpha/2,df=n-2)*seyhat(xh=xlevels[i])
}
xlevels = c(170,172,174,175,179,182,183,186)
g = 8
alpha = 0.05/g
bonfmat = matrix(0, nrow = 8, ncol = 2)
for(i in 1:length(xlevels)){
bonfmat[i,] = yhat(x=xlevels[i])+c(-1,1)*qt(1-alpha/2,df=n-2)*seyhat(xh=xlevels[i])
}
bonfmat
xlevels = c(170,172,174,175,179,182,183,186)
W = sqrt(2 * qf(.95, 2, n - 2))
g=length(xlevels)
whmat=matrix(0,g,2)
colnames(CIs)=c("Lower","Upper")
xlevels = c(170,172,174,175,179,182,183,186)
W = sqrt(2 * qf(.95, 2, n - 2))
g=length(xlevels)
whmat=matrix(0,g,2)
colnames(whmat)=c("Lower","Upper")
for(i in 1:g){
whmat[i,] = yhat(x=xvec[i])+c(-1,1)*W*seyhat(xh=xvec[i])
}
xlevels = c(170,172,174,175,179,182,183,186)
W = sqrt(2 * qf(.95, 2, n - 2))
g=length(xlevels)
whmat=matrix(0,g,2)
colnames(whmat)=c("Lower","Upper")
for(i in 1:g){
whmat[i,] = yhat(x=xlevels[i])+c(-1,1)*W*seyhat(xh=xlevels[i])
}
whmat
casestudy1_data <- read.csv("~/Desktop/repos/master-intro-ds/Data/casestudy1_data.csv")
View(casestudy1_data)
casestudy1_data <- read.csv("~/Desktop/repos/master-intro-ds/Data/casestudy1_data.csv")
View(casestudy1_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read.csv("~/Desktop/repos/master-intro-ds/Data/casestudy1_data.csv")
head(data)
str_c("The column names are:", colnames(data))
data <- read.csv("~/Desktop/repos/master-intro-ds/Data/casestudy1_data.csv")
head(data)
str_c("The column names are:", str_c(colnames(data)))
colnames(data)
str(data)
nrow(freshmen)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read.csv("~/Desktop/repos/master-intro-ds/Data/casestudy1_data.csv")
head(data)
colnames(data)
str(data)
unique(data$class)
data[data$class == "Super Senior +",]$class = "Super Senior+"
data = as_tibble(data)
freshmen = data[data$class == "Freshman", ]
sophomores = data[data$class == "Sophomore", ]
juniors = data[data$class == "Junior", ]
seniors = data[data$class == "Senior", ]
superseniors = data[data$class == "Super Senior+", ]
nrow(freshmen)
nrow(sophomores)
nrow(juniors)
nrow(seniors)
nrow(superseniors)
mean(freshmen$sleep)
mean(sophomores$sleep)
mean(juniors$sleep)
mean(seniors$sleep)
mean(superseniors$sleep)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data %>%
group_by(music) %>%
summarise(count = n(),
vape = mean(vape),
cannabis = mean(cannabis),
tobacco = mean(tobacco)
)
rounded = floor(data$number)
unique(data$residentialpref)
urban_idx = (data$residentialpref == "Urban/City") | (data$residentialpref == "Urban")
urban = data[urban_idx,]
urban
urban_idx = (data$residentialpref == "Urban/City") | (data$residentialpref == "Urban")
#urban
urban = data[urban_idx,]
#others
not_urban = data[!urban_idx,]
nrow(urban[(urban$tattoos>0),]) / nrow(urban)
nrow(not_urban[(not_urban$tattoos>0),]) / nrow(not_urban)
urban_tattoo_pct = nrow(urban[(urban$tattoos>0),]) / nrow(urban)
not_urban_tattoo_pct = nrow(not_urban[(not_urban$tattoos>0),]) / nrow(not_urban)
urban_tattoo_pct / not_urban_tattoo_pct
grep("rural", data$residentialpref, ignore.case = TRUE)
rural = data[rural_idx,]
rural_idx = grep("rural", data$residentialpref, ignore.case = TRUE)
rural = data[rural_idx,]
rural_country_pct = nrow(rural[rural$music == "Country"], ) / nrow(rural)
rural_country_pct = nrow(rural[rural$music == "Country",] ) / nrow(rural)
urban_country_pct = nrow(urban[urban$music == "Country",] ) / nrow(urban)
c(rural_country_pct, urban_country_pct)
plot(x, y)
plot(data$heightcm,
data$heightin,
xlab = "height in cm",
ylab = "height in in",
main = "Student Heights")
not_outliers = data[data$heightin>10, ]
not_outliers = data[data$heightin>10, ]
plot(not_outliers$heightcm,
not_outliers$heightin,
xlab = "height in cm",
ylab = "height in in",
main = "Student Heights (No Outliers)")
sqrt(2*3.55)
4.5114 + c(-1,1) * 1.761 * sqrt(198.909/(14*1172.131))
4.5114^2 * 1172.131
sqrt(198.909/14)
23856.07/3.769322
198.909/14
4.5114/sqrt(198.909/(14*1172.131))
40.97663^2
sqrt(198.909/14)
4.5114/(sqrt(198.909/(14*1172.131)))
40.97663^2
b1 = 4.5114
ssx = 1172.131
b1^2*ssx
ssr = b1^2*ssx
sqrt(198.909/14)
rmse = sqrt(198.909/14)
mse = 198.909/14
ssr/mse
40.97663^2
ssr(ssr + 14*mse)
ssr/(ssr + 14*mse)
library(readr)
library(ggplot2)
library(magrittr)
#set wd to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
food = read_csv(file = "../Data/Food.csv")
head(food)
View(food)
library(ggplot2)
#plot a bar chart of pnns_groups_1
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1))
#text trainwreck on bottom; to rotate xaxis labels use this:
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(food) +
geom_bar(aes(x = pnns_groups_1, fill = pnns_groups_1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("food type") +
ggtitle("Food Groups")
#------------------------
#Pairwise scatter plots
data = swiss
?swiss
#scatter plot of every variable against one another in a grid
plot(data)
#scatter plot of say the first 3 variables
plot(data[, 1:3])
library(GGally)
ggpairs(data, aes(alpha = 0.4))
##Histograms
dev.new()
gg1 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white")
gg1
dev.new()
gg1
#same histogram but with more bars (100 of them)
gg2 = ggplot(food, aes(x = energy_100g)) +
geom_histogram(color="black", fill="white", bins = 100) +
gg2
#side-by-side plotting w/ ggarrange
library(ggpubr)
ggarrange(gg1, gg2)
ggplot(food, aes(x = energy_100g)) +
geom_histogram(aes(y = after_stat(density)),
color="black",
fill="white",
bins = 100) +
geom_density(alpha=.2, fill="red")
#-------------------------------
#box plots
ggplot(food) +
geom_boxplot(aes(x = energy_100g))
#show boxplot of this variable across food groups in
#pnns_groups_1
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1))
ggplot(food) +
geom_boxplot(aes(x = energy_100g, fill = pnns_groups_1)) +
coord_flip()
#first, read in the diamonds data set
diamonds = read.csv(file = "../Data/diamonds.csv",
header = TRUE)
plot1 = ggplot(diamonds,
aes(x = carat, y = price, colour = color))
plot1 #note this is blank because we haven't told it what kind of plot yet
plot2 = plot1 +
geom_point(aes(alpha = 0.25))
plot2
#say now we want to add shapes for the cut of the diamond
plot3 = plot2 +
geom_point(aes(shape = cut))
#adding a smooth line to the original plot
plot3 = plot3 +
geom_smooth()
plot3
plot3 +
avg_smoothed_curve
avg_smoothed_curve = geom_smooth(data = diamonds, aes(x = carat, y = price))
plot3b = plot2b +
geom_point(aes(colour = color,
shape = cut)) #then add colors and shapes
plot3b
#use inherit.aes = FALSE to ignore previously defined aesthetics
plot4 = plot2 +
geom_point(aes(shape = cut)) +
geom_smooth(inherit.aes = FALSE, aes(x = carat, y = price))
plot4
#you can also store geometric objects and apply them to any plot! (super useful!!)
bestfitline = geom_smooth(method = "lm",
se = TRUE,
colour = alpha("steelblue", 0.5),
linewidth = 2)
plot4 +
bestfitline
#use inherit.aes = FALSE to ignore previously defined aesthetics
plot4 = plot2 +
geom_point(aes(shape = cut)) +
geom_smooth() +
geom_smooth(inherit.aes = FALSE, aes(x = carat, y = price))
plot4
#you can also store geometric objects and apply them to any plot! (super useful!!)
bestfitline = geom_smooth(method = "lm",
se = TRUE,
colour = alpha("steelblue", 0.5),
linewidth = 2)
plot4 +
bestfitline
#saving an .RData file
x = c(1, 2, 3, 4)
y = x^2
#set current directory
dir = getwd()
setwd(dir)
#save the variables x and y
save(x, y, file = "first_data.RData")
#re-load the data
rm(list = ls())
load(file = "first_data.RData")
##This will also work as an .rds file
save(x, y, file = "first_data.rds")
rm(list = ls())
load(file = "first_data.rds")
#Example of airport data
airports1 = read.table(file = "../Data/airports.csv",
sep = ",", header = FALSE)
airports2 = read.table(file = "../Data/airports.csv",
sep = ",", header = TRUE)
#to keep strings, run the following:
airports3 = read.table(file = "../Data/airports.csv",
sep = ",", header = TRUE, stringsAsFactors = FALSE)
#or we can use read.csv
airports4 = read.csv(file = "../Data/airports.csv",
header = TRUE, stringsAsFactors = FALSE)
best_in_show <- read.csv("~/Desktop/best_in_show.csv")
View(best_in_show)
dogs_full <- read.csv("~/Desktop/dogs_full.csv")
View(dogs_full)
dogs = read.csv("~/Desktop/dogs_full.csv")
library(ggplot2)
ggplot(dogs, aes(group, height)) +
geom_boxplot()
dogs[dogs == "no data"] = NA            # Replace particular value with NA
dogs
str(dogs)
colnames(dogs)
numeric_cols = colnames(dogs)[6:16]
